package com.reajason.javaweb;

import lombok.SneakyThrows;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.io.IOUtils;
import org.junit.jupiter.api.Test;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.zip.GZIPInputStream;
import java.util.zip.GZIPOutputStream;

/**
 * @author ReaJason
 * @since 2024/11/24
 */
class GodzillaConnectionTest {

    @Test
    void test() throws IOException {
        byte[] bytes = Base64.decodeBase64("");
        byte[] x = x(bytes, true);
        System.out.println(Base64.encodeBase64String(x));
        Files.write(Paths.get("Connection.class"), bytes);
    }

    public byte[] x(byte[] s, boolean m) {
        try {
            Cipher c = Cipher.getInstance("AES");
            c.init(m ? 1 : 2, new SecretKeySpec("3c6e0b8a9c15224a".getBytes(), "AES"));
            return c.doFinal(s);
        } catch (Exception var41) {
            return null;
        }
    }

    @Test
    void getResult() throws IOException {
        String result = "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".substring(16);
        result = result.substring(0, result.length() - 16);
        byte[] bytes = Base64.decodeBase64(result);
        byte[] x = x(bytes, false);
        GZIPInputStream gzipInputStream = new GZIPInputStream(new ByteArrayInputStream(x));
        IOUtils.copy(gzipInputStream, System.out);
    }

    @Test
    void getPayload() throws IOException {
        String result = URLDecoder.decode("iBFCSp6teq50bb9gXWFdEM36h%2FTnIqtHIg813YXy3GwxPP6S9ve6SZgDY0TJnOoZjxZCkkFO1HNx2VaBe9JHo9noP74PGzx0mxOH9oFDgXzIIGwvPLsKcLQVVRptBojgZWB90sIU0EHPzppD87GxSGS9Jl3jG1%2B6Ak3AfJ3jjL0FqU1RvKL0XZ0A3Teub%2FMZHXfZyFjMveM1vzwJEJ2X3h5Tr9tXEAzyT9eKInXwoxXJlb%2B31oFxN8ohKS4i5dfu", "UTF-8");
        byte[] bytes = Base64.decodeBase64(result);
        byte[] x = x(bytes, false);
        ByteArrayInputStream tStream = new ByteArrayInputStream(x);
        ByteArrayOutputStream tp = new ByteArrayOutputStream();
        byte[] lenB = new byte[4];
        int read;
        try {
            GZIPInputStream inputStream = new GZIPInputStream(tStream);
            while (true) {
                byte t = (byte) inputStream.read();
                if (t != -1) {
                    if (t == 2) {
                        String key = tp.toString();
                        inputStream.read(lenB);
                        int len = bytesToInt(lenB);
                        byte[] data = new byte[len];
                        int readOneLen = 0;
                        do {
                            read = readOneLen + inputStream.read(data, readOneLen, data.length - readOneLen);
                            readOneLen = read;
                        } while (read < data.length);
                        System.out.println(key);
                        System.out.println(new String(data));
                        tp.reset();
                    } else {
                        tp.write(t);
                    }
                } else {
                    tp.close();
                    tStream.close();
                    inputStream.close();
                    return;
                }
            }
        } catch (Exception ignored) {
        }
    }

    public static int bytesToInt(byte[] bytes) {
        return (bytes[0] & 255) | ((bytes[1] & 255) << 8) | ((bytes[2] & 255) << 16) | ((bytes[3] & 255) << 24);
    }

    @Test
    @SneakyThrows
    void generatePayload() {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        try (GZIPOutputStream gzipOutputStream = new GZIPOutputStream(baos);) {
            byte[] value = "close".getBytes();
            gzipOutputStream.write("methodName".getBytes());
            gzipOutputStream.write(2);
            gzipOutputStream.write(intToBytes(value.length));
            gzipOutputStream.write(value);
        }
        byte[] x = x(baos.toByteArray(), true);
        System.out.println(URLEncoder.encode(Base64.encodeBase64String(x), "UTF-8"));
    }

    public static byte[] intToBytes(int value) {
        return new byte[]{(byte) (value & 255), (byte) ((value >> 8) & 255), (byte) ((value >> 16) & 255), (byte) ((value >> 24) & 255)};
    }

}