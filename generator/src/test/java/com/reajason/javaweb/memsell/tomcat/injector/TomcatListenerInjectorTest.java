package com.reajason.javaweb.memsell.tomcat.injector;

import com.reajason.javaweb.memsell.InjectorGenerator;
import com.reajason.javaweb.util.ClassUtils;
import com.reajason.javaweb.util.CommonUtil;
import lombok.SneakyThrows;
import org.apache.commons.codec.binary.Base64;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * @author ReaJason
 * @since 2024/11/24
 */
class TomcatListenerInjectorTest {

    @Test
    @SneakyThrows
    void generate() {
        byte[] shellBytes = Base64.decodeBase64("");
        String shellClassName = "org.apache.utils.CommonListener";
        String injectClassName = this.getClass().getName() + "1";
        byte[] bytes = InjectorGenerator.generate(TomcatListenerInjector.class, injectClassName, shellClassName, shellBytes, null);
        Object obj = ClassUtils.newInstance(bytes);
        assertEquals(injectClassName, obj.getClass().getName());
        assertEquals(shellClassName, ClassUtils.invokeMethod(obj, "getClassName", null, null).toString());
        assertEquals(Base64.encodeBase64String(CommonUtil.gzipCompress(shellBytes)).replace(System.lineSeparator(), ""),
                ClassUtils.invokeMethod(obj, "getBase64String", null, null).toString());
        System.out.println(Base64.encodeBase64String(bytes));
    }

    @Test
    @SneakyThrows
    void generateJakarta() {
        byte[] shellBytes = Base64.decodeBase64("");
        String shellClassName = "org.apache.utils.CommonJakartaListener";
        String injectClassName = this.getClass().getName() + "2";
        byte[] bytes = InjectorGenerator.generate(TomcatListenerInjector.class, injectClassName, shellClassName, shellBytes, null);
        Object obj = ClassUtils.newInstance(bytes);
        assertEquals(injectClassName, obj.getClass().getName());
        assertEquals(shellClassName, ClassUtils.invokeMethod(obj, "getClassName", null, null).toString());
        assertEquals(Base64.encodeBase64String(CommonUtil.gzipCompress(shellBytes)).replace(System.lineSeparator(), ""),
                ClassUtils.invokeMethod(obj, "getBase64String", null, null).toString());
        System.out.println(Base64.encodeBase64String(bytes));
    }
}